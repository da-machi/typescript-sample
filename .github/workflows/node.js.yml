name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # コードをリポジトリからチェックアウト
    - uses: actions/checkout@v4

    # Node.js 18 をセットアップし、npmキャッシュを有効化
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    # 依存関係をインストール（package-lock.jsonを元に厳密インストール）
    - run: npm ci

    # ビルド処理があれば実行
    - run: npm run build --if-present

    # JestをJSON出力付きで実行
    # テスト失敗時もジョブを止めず、後続で処理可能にするため '|| true' を付与
    - name: Run Jest with JSON output
      run: npx jest --json --outputFile=jest-results.json || true

    # テスト結果JSONから失敗テストの一覧をMarkdown形式で生成し、result.mdに保存
    # 失敗が無ければ「All tests passed! 🎉」だけを記載
    # また、GITHUB_OUTPUTにファイル名を出力して後続ステップへ渡す
    - name: Show test summary in job summary
      id: summary
      run: |
        if [ $(jq '.numFailedTests' jest-results.json) -eq 0 ]; then
          echo "All tests passed! 🎉" > result.md
        else
          echo "## ❌ Failed Tests" > result.md
          echo "| Suite (Describe) | Test Name | File:Line |" >> result.md
          echo "| ---------------- | --------- | --------- |" >> result.md
    
          jq -r '
            .testResults[]
            | .assertionResults[]
            | select(.status=="failed")
            | {
                suite: (.ancestorTitles | join(" > ")),
                name: .fullName,
                location: (
                  .failureMessages[]
                  | capture("(?<file>[^:]+\\.ts):(\\d+):(\\d+)")
                  | "\(.file):\(.string | split(\":\") | .[1]):\(.string | split(\":\") | .[2])"
                )
              }
          ' jest-results.json | jq -s '.[]' | while read -r line; do
            suite=$(echo "$line" | jq -r '.suite')
            name=$(echo "$line" | jq -r '.name')
            loc=$(echo "$line" | jq -r '.location')
            printf "| %s | %s | %s |\n" "$suite" "$name" "$loc" >> result.md
          done
    
          echo "" >> result.md
          echo "> ※ File:Line列はテスト失敗時のソースコード上の位置（ファイル:行:列）を出力します。" >> result.md
          echo "> Jestの出力メッセージから抽出しているため、正確な位置が得られない場合もあります。" >> result.md
        fi
        echo "summary_file=result.md" >> $GITHUB_OUTPUT
  
    # 生成したMarkdownファイルをアーティファクトとして保存（必要に応じて）
    - name: Upload job summary
      uses: actions/upload-artifact@v4
      with:
        name: jest-summary
        path: result.md

    # GitHub ActionsのジョブサマリーにMarkdown内容を反映
    - name: Add job summary markdown to GitHub UI
      uses: actions/github-script@v6
      with:
        script: |
          // GitHub Actionsのcoreモジュールはグローバル提供されているので require 不要
          const fs = require('fs');
          const summary = fs.readFileSync('result.md', 'utf8');
          core.summary.addRaw(summary).write();
